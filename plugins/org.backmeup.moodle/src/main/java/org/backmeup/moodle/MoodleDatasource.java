package org.backmeup.moodle;

import java.io.File;
import java.io.InputStream;
import java.net.URI;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Properties;

import org.backmeup.plugin.api.connectors.FilesystemLikeDatasource;
import org.backmeup.plugin.api.connectors.FilesystemURI;
import org.jdom2.Document;
import org.jdom2.Element;
import org.jdom2.input.SAXBuilder;


/**
 * This class processes the xml file generated by the server side moodle
 * plugin and downloads the content
 * 
 * @author florianjungwirth
 *
 */
public class MoodleDatasource extends FilesystemLikeDatasource {

	@Override
	public String getStatistics(Properties items) {
		return null;
	}

	@Override
	public InputStream getFile(Properties items, FilesystemURI uri) {
		try {
			return uri.getUri().toURL().openStream();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}

	@Override
	public List<FilesystemURI> list(Properties items, FilesystemURI uri) {

		List<FilesystemURI> results = new ArrayList<FilesystemURI>();

		String serverurl = items.getProperty("Moodle Server Url");
		String username = items.getProperty("Username");
		String password = items.getProperty("Password");

		serverurl = serverurl.endsWith("/") ? serverurl : serverurl+"/";
		
		try {
			String authUrl = serverurl
					+ "blocks/backmeup/service.php?username=" + username
					+ "&password=" + password + "&action=list";
			
			Document doc = new SAXBuilder().build( authUrl );
			
			List<Element> courses = doc.getRootElement().getChildren("course");

			Iterator<Element> courseIterator = courses.iterator();
			while(courseIterator.hasNext()) {
				Element course = courseIterator.next();
				List<Element> sections = course.getChildren("section");
				Iterator<Element> sectionIterator = sections.iterator();
				while(sectionIterator.hasNext()) {
					Element section = sectionIterator.next();
					List<Element> sequences = section.getChildren("sequence");
					Iterator<Element> sequenceIterator = sequences.iterator();
					while(sequenceIterator.hasNext()) {
						Element sequence = sequenceIterator.next();
						Element data = sequence.getChild("data");
						if(data != null) {
							List<Element> files = data.getChildren("file");
							Iterator<Element> fileIterator = files.iterator();
							while(fileIterator.hasNext()) {
								Element file = fileIterator.next();
								String mappedPath = (file.hasAttributes()) ? course.getAttributeValue("name")+"/"+file.getAttributeValue("path")+"/" : course.getAttributeValue("name")+"/";
								FilesystemURI filesystemUri = new FilesystemURI(new URI(file.getText()), false);
								filesystemUri.setMappedUri(new URI(java.net.URLEncoder.encode(mappedPath, "UTF-8").replace("+", "%20")+new File(file.getText()).getName())); // just use the name of the file as its destination
								results.add(filesystemUri);
							}
						}
					}
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return results;
	}
}
